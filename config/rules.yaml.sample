version: 4.0.0
types:
  security_group:
    description: Check each rule on each security group and on each source
    findings:
      - message:
          text: '[{name}] Allow connection to specific port (or range) from public
            network ({source}=>{ports})'
          args:
            name:
              type: variable
              variable: sg_name
            source:
              type: variable
              variable: source
            ports:
              type: variable
              variable: ports
        rules:
          - type: has_attribute_equal
            description: Check if the asset is public
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: is_ports
            description: Check if ports is a specific port (or range) (like 9000-9001)
            conditions:
              - type: constant
                name: is_ports
                value: true
            data_sources:
              - type: variable
                name: source
                value: ports
          - type: is_private_cidr
            description: Check if source is not a private CIDR block - RFC 1918
            conditions:
              - type: constant
                name: is_private_cidr
                value: false
            data_sources:
              - type: variable
                name: source
                value: source
        severity: high
      - message:
          text: '[{name}] Allow connection to all port from public network ({source}=>{ports})'
          args:
            name:
              type: variable
              variable: sg_name
            source:
              type: variable
              variable: source
            ports:
              type: variable
              variable: ports
        rules:
          - type: has_attribute_equal
            description: Check if the asset is public
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: in
            description: Check if variable_in is in value_in
            conditions:
              - type: constant
                name: data_element
                value: all
            data_sources:
              - type: variable
                name: data_list
                value: ports
          - type: is_private_cidr
            description: Check if source is not a private CIDR block - RFC 1918
            conditions:
              - type: constant
                name: is_private_cidr
                value: false
            data_sources:
              - type: variable
                name: source
                value: source
        severity: high
      - message:
          text: '[{name}] Allow connection to all port from private network ({source}=>{ports})'
          args:
            name:
              type: variable
              variable: sg_name
            source:
              type: variable
              variable: source
            ports:
              type: variable
              variable: ports
        rules:
          - type: has_attribute_equal
            description: Check if the asset is private
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: in
            description: Check if variable_in is in value_in
            conditions:
              - type: constant
                name: data_element
                value: all
            data_sources:
              - type: variable
                name: data_list
                value: ports
          - type: is_private_cidr
            description: Check if source is a private CIDR block - RFC 1918
            conditions:
              - type: constant
                name: is_private_cidr
                value: true
            data_sources:
              - type: variable
                name: source
                value: source
        severity: medium
      - message:
          text: '[{name}] Allow connection to specific port (or range) from private
            network ({source}=>{ports})'
          args:
            name:
              type: variable
              variable: sg_name
            source:
              type: variable
              variable: source
            ports:
              type: variable
              variable: ports
        rules:
          - type: has_attribute_equal
            description: Check if the asset is private
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: is_ports
            description: Check if ports is a specific port (or range) (like 9000-9001)
            conditions:
              - type: constant
                name: is_ports
                value: true
            data_sources:
              - type: variable
                name: source
                value: ports
          - type: is_private_cidr
            description: Check if source is a private CIDR block - RFC 1918
            conditions:
              - type: constant
                name: is_private_cidr
                value: true
            data_sources:
              - type: variable
                name: source
                value: source
        severity: low
  attributes:
    description: Check each rule on asset attributes
    findings:
      - message:
          text: 'DnsRecord: {dns_record}'
          args:
            dns_record:
              type: attribute
              key: dns_record
        severity: low
        rules:
          - type: has_attribute
            description: Check if dns_record attribute exists
            conditions:
              - type: constant
                name: attribute
                value: dns_record
            data_sources:
              - type: variable
                name: asset
                value: asset
      - message:
          text: '[{resource_id}] Admin actions: {admin_actions}'
          args:
            admin_actions:
              type: attribute
              key: admin_actions
            resource_id:
              type: attribute
              key: resource_id
        severity: high
        rules:
          - type: has_attribute
            description: Check if admin_actions attribute exists
            conditions:
              - type: constant
                name: attribute
                value: admin_actions
            data_sources:
              - type: variable
                name: asset
                value: asset
      - message:
          text: '[{resource_id}] Poweruser actions: {poweruser_actions}'
          args:
            poweruser_actions:
              type: attribute
              key: poweruser_actions
            resource_id:
              type: attribute
              key: resource_id
        severity: medium
        rules:
          - type: has_attribute
            description: Check if poweruser_actions attribute exists
            conditions:
              - type: constant
                name: attribute
                value: poweruser_actions
            data_sources:
              - type: variable
                name: asset
                value: asset
      - message:
          text: '[{bucket_name}] ACL BlockPublicAcls set to {attribute_value}'
          args:
            attribute_value:
              type: attribute
              key: acls.block_public_acls
            bucket_name:
              type: attribute
              key: name
        severity: low
        rules:
          - type: has_attribute
            description: Check if acls exists
            conditions:
              - type: constant
                name: attribute
                value: acls
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if BlockPublicAcls is false
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: acls.block_public_acls
      - message:
          text: '[{bucket_name}] ACL BlockPublicPolicy set to {attribute_value}'
          args:
            attribute_value:
              type: attribute
              key: acls.block_public_policy
            bucket_name:
              type: attribute
              key: name
        severity: low
        rules:
          - type: has_attribute
            description: Check if acls exists
            conditions:
              - type: constant
                name: attribute
                value: acls
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if BlockPublicPolicy is false
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: acls.block_public_policy
      - message:
          text: '[{bucket_name}] ACL IgnorePublicAcls set to {attribute_value}'
          args:
            attribute_value:
              type: attribute
              key: acls.ignore_public_acls
            bucket_name:
              type: attribute
              key: name
        severity: medium
        rules:
          - type: has_attribute
            description: Check if acls exists
            conditions:
              - type: constant
                name: attribute
                value: acls
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if IgnorePublicAcls is false
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: acls.ignore_public_acls
      - message:
          text: '[{bucket_name}] ACL RestrictPublicBuckets set to {attribute_value}'
          args:
            attribute_value:
              type: attribute
              key: acls.restrict_public_buckets
            bucket_name:
              type: attribute
              key: name
        severity: low
        rules:
          - type: has_attribute
            description: Check if acls exists
            conditions:
              - type: constant
                name: attribute
                value: acls
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if RestrictPublicBuckets is false
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: acls.restrict_public_buckets
      - message:
          text: '[{bucket_name}] ACL: All Users: {rights}'
          args:
            rights:
              type: attribute
              key: acls.all_users_grants
            bucket_name:
              type: attribute
              key: name
        severity: high
        rules:
          - type: has_attribute
            description: Check if acls exists
            conditions:
              - type: constant
                name: attribute
                value: acls
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_not_equal
            description: Check if All Users can access to anything
            conditions:
              - type: constant
                name: attribute_value
                value: ''
            data_sources:
              - type: attribute
                name: attribute_value
                value: acls.all_users_grants
      - message:
          text: '[{bucket_name}] ACL: Any Authenticated Users: {rights}'
          args:
            rights:
              type: attribute
              key: acls.any_authenticated_users_grants
            bucket_name:
              type: attribute
              key: name
        severity: high
        rules:
          - type: has_attribute
            description: Check if acls exists
            conditions:
              - type: constant
                name: attribute
                value: acls
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_not_equal
            description: Check if Any Authenticated Users can access to anything
            conditions:
              - type: constant
                name: attribute_value
                value: ''
            data_sources:
              - type: attribute
                name: attribute_value
                value: acls.any_authenticated_users_grants
      - message:
          text: '[{service_name}] Public {service_type} with authentication'
          args:
            service_name:
              type: attribute
              key: name
            service_type:
              type: attribute
              key: aws_service
        severity: medium
        rules:
          - type: has_attribute_equal
            description: Check if the asset is public
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: has_attribute
            description: Check if authorization exists
            conditions:
              - type: constant
                name: attribute
                value: authorization
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if the asset has_no_auth_endpoint is false
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: authorization.has_no_auth_endpoint
      - message:
          text: '[{service_name}] Public {service_type} without authentication'
          args:
            service_name:
              type: attribute
              key: name
            service_type:
              type: attribute
              key: aws_service
        severity: high
        rules:
          - type: has_attribute_equal
            description: Check if the asset is public
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: has_attribute
            description: Check if authorization exists
            conditions:
              - type: constant
                name: attribute
                value: authorization
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if the asset has_no_auth_endpoint is true
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: authorization.has_no_auth_endpoint
      - message:
          text: '[{service_name}] Private {service_type} without authentication'
          args:
            service_name:
              type: attribute
              key: name
            service_type:
              type: attribute
              key: aws_service
        severity: high
        rules:
          - type: has_attribute_equal
            description: Check if the asset is public
            conditions:
              - type: constant
                name: attribute_value
                value: false
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: has_attribute
            description: Check if authorization exists
            conditions:
              - type: constant
                name: attribute
                value: authorization
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if the asset has_no_auth_endpoint is true
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: authorization.has_no_auth_endpoint
      - message:
          text: '[{service_name}] Deprecated mysql engine version ({current_version})'
          args:
            service_name:
              type: attribute
              key: name
            current_version:
              type: attribute
              key: engine
        severity: high
        rules:
          - type: has_attribute
            description: Check if engine exists
            conditions:
              - type: constant
                name: attribute
                value: engine
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: engine_deprecated_version
            description: Check if mysql engine is not deprecated
            conditions:
              - type: constant
                name: engine_name
                value: mysql
              - type: constant
                name: versions
                value:
                  - '5.7.33'
            data_sources:
              - type: attribute
                name: attribute_value
                value: engine
# https://mariadb.com/kb/en/security/
      - message:
          text: '[{service_name}] Deprecated mariadb engine version ({current_version})'
          args:
            service_name:
              type: attribute
              key: name
            current_version:
              type: attribute
              key: engine
        severity: high
        rules:
          - type: has_attribute
            description: Check if engine exists
            conditions:
              - type: constant
                name: attribute
                value: engine
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: engine_deprecated_version
            description: Check if mariadb engine is not deprecated
            conditions:
              - type: constant
                name: engine_name
                value: mariadb
              - type: constant
                name: versions
                value:
                  - '10.2.41'
                  - '10.3.32'
                  - '10.4.22'
                  - '10.5.13'
                  - '10.6.4'
            data_sources:
              - type: attribute
                name: attribute_value
                value: engine
# https://www.postgresql.org/support/security/10/
      - message:
          text: '[{service_name}] Deprecated postgres engine version ({current_version})'
          args:
            service_name:
              type: attribute
              key: name
            current_version:
              type: attribute
              key: engine
        severity: high
        rules:
          - type: has_attribute
            description: Check if engine exists
            conditions:
              - type: constant
                name: attribute
                value: engine
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: engine_deprecated_version
            description: Check if postgres engine is not deprecated
            conditions:
              - type: constant
                name: engine_name
                value: postgres
              - type: constant
                name: versions
                value:
                  - '10.17'
                  - '11.12'
                  - '12.7'
                  - '13.3'
            data_sources:
              - type: attribute
                name: attribute_value
                value: engine
# https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html
      - message:
          text: '[{service_name}] Deprecated sqlserver-se (mssql) engine version ({current_version})'
          args:
            service_name:
              type: attribute
              key: name
            current_version:
              type: attribute
              key: engine
        severity: high
        rules:
          - type: has_attribute
            description: Check if engine exists
            conditions:
              - type: constant
                name: attribute
                value: engine
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: engine_deprecated_version
            description: Check if sqlserver-se engine is not deprecated
            conditions:
              - type: constant
                name: engine_name
                value: sqlserver-se
              - type: constant
                name: versions
                value:
                  - '12.00.5571.0.v1'
                  - '13.00.5820.21.v1'
                  - '14.00.3294.2.v1'
                  - '15.00.4043.16.v1'
            data_sources:
              - type: attribute
                name: attribute_value
                value: engine
# https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html
      - message:
          text: '[{service_name}] Deprecated EKS Kubernetes version ({current_version})'
          args:
            service_name:
              type: attribute
              key: name
            current_version:
              type: attribute
              key: version
        severity: high
        rules:
          - type: has_attribute
            description: Check if version exists
            conditions:
              - type: constant
                name: attribute
                value: version
            data_sources:
              - type: variable
                name: asset
                value: asset
          - type: has_attribute_equal
            description: Check if the asset is a EKS cluster
            conditions:
              - type: constant
                name: attribute_value
                value: EKS
            data_sources:
              - type: attribute
                name: attribute_value
                value: aws_service
          - type: engine_deprecated_version
            description: Check if k8s version is not deprecated
            conditions:
              - type: constant
                name: engine_name
                value: kubernetes
              - type: constant
                name: versions
                value:
                  - '1.18'
            data_sources:
              - type: attribute
                name: attribute_value
                value: version
      - message:
          text: '[{service_name}] Public EKS cluster'
          args:
            service_name:
              type: attribute
              key: name
        severity: high
        rules:
          - type: has_attribute_equal
            description: Check if the asset is public
            conditions:
              - type: constant
                name: attribute_value
                value: true
            data_sources:
              - type: attribute
                name: attribute_value
                value: public
          - type: has_attribute_equal
            description: Check if the asset is a EKS cluster
            conditions:
              - type: constant
                name: attribute_value
                value: EKS
            data_sources:
              - type: attribute
                name: attribute_value
                value: aws_service
